<?php
namespace NooNoo;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-06-02 at 11:32:12.
 */
class RegexTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Regex
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Regex;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NooNoo\Regex::add
     */
    public function testAdd()
    {
        $actual = $this->object->add('add');
        $this->assertEquals('(add)', $actual);
    }

    /**
     * @covers NooNoo\Regex::add
     */
    public function testAddWithNamedGroup()
    {
        $actual = $this->object->add('add', 'name');
        $this->assertEquals('(?P<name>add)', $actual);
    }

    /**
     * @covers NooNoo\Regex::add
     * @covers NooNoo\Regex::addLimit
     */
    public function testAddWithLimit()
    {
        $actual = $this->object->between(1, 2)->add('add');
        $this->assertEquals('(add{1,2})', $actual);
    }

    /**
     * @covers NooNoo\Regex::add
     * @covers NooNoo\Regex::addModifier
     */
    public function testAddWithModifierZeroOrMore()
    {
        $actual = $this->object->zeroOrMore()->add('zeroOrMore');
        $this->assertEquals('(zeroOrMore*)', $actual);
    }

    /**
     * @covers NooNoo\Regex::add
     * @covers NooNoo\Regex::addModifier
     * @covers NooNoo\Regex::optional
     */
    public function testAddWithModifierOptional()
    {
        $actual = $this->object->optional()->add('zeroOrOne');
        $this->assertEquals('(zeroOrOne)?', $actual);
    }


    /**
     * @covers NooNoo\Regex::start
     */
    public function testStart()
    {
        $actual = $this->object->start();
        $this->assertEquals('^', $actual);
    }

    /**
     * @covers NooNoo\Regex::end
     */
    public function testEnd()
    {
        $actual = $this->object->end();
        $this->assertEquals('$', $actual);
    }

    /**
     * @covers NooNoo\Regex::lowercase
     */
    public function testLowercase()
    {
        $actual = $this->object->lowercase();
        $this->assertEquals('([a-z])', $actual);
    }

    /**
     * @covers NooNoo\Regex::uppercase
     */
    public function testUppercase()
    {
        $actual = $this->object->uppercase();
        $this->assertEquals('([A-Z])', $actual);
    }

    /**
     * @covers NooNoo\Regex::alpha
     */
    public function testAlpha()
    {
        $actual = $this->object->alpha();
        $this->assertEquals('([a-zA-Z])', $actual);
    }

    /**
     * @covers NooNoo\Regex::slugchar
     */
    public function testSlugchar()
    {
        $actual = $this->object->slugchar();
        $this->assertEquals('([a-zA-Z0-9-_\/])', $actual);
    }

    /**
     * @covers NooNoo\Regex::number
     */
    public function testNumber()
    {
        $actual = $this->object->number();
        $this->assertEquals('([0-9]+)', $actual);
    }

    /**
     * @covers NooNoo\Regex::digit
     */
    public function testDigit()
    {
        $actual = $this->object->digit();
        $this->assertEquals('([0-9])', $actual);
    }

    /**
     * @covers NooNoo\Regex::alphanumeric
     */
    public function testAlphanumeric()
    {
        $actual = $this->object->alphanumeric();
        $this->assertEquals('([a-zA-Z0-9])', $actual);

        // So we can use the @depends annotation
        return $actual;
    }

    /**
     * @covers  NooNoo\Regex::then
     * @depends testAlphanumeric
     */
    public function testThen($object)
    {
        $actual = $object->then('teststring');
        $this->assertEquals('([a-zA-Z0-9])(teststring)', $actual);
    }

    /**
     * @covers  NooNoo\Regex::raw
     * @depends testAlphanumeric
     */
    public function testRaw($object)
    {
        $actual = $object->raw('(.*)');
        $this->assertEquals('([a-zA-Z0-9])(teststring)((.*))', $actual);
    }

    /**
     * @covers  NooNoo\Regex::maybe
     * @depends testAlphanumeric
     */
    public function testMaybe($object)
    {
        $actual = $object->maybe('perhaps');
        $this->assertEquals('([a-zA-Z0-9])(teststring)((.*))(perhaps)?', $actual);
    }

    /**
     * @covers  NooNoo\Regex::either
     * @depends testAlphanumeric
     */
    public function testEither($object)
    {
        $actual = $object->either('couldbe', 'mightbe');
        $this->assertEquals(
            '([a-zA-Z0-9])(teststring)((.*))(perhaps)?(couldbe|mightbe)',
            $actual
        );
    }

    /**
     * @covers  NooNoo\Regex::oneOf
     * @depends testAlphanumeric
     * @todo   Implement testOneOf().
     */
    public function testOneOf($object)
    {
        $actual = $object->oneOf(array('is', 'it', 'in'));
        $this->assertEquals(
            '([a-zA-Z0-9])(teststring)((.*))(perhaps)?(couldbe|mightbe)(is|it|in)',
            $actual
        );
    }

    /**
     * @covers NooNoo\Regex::multiple
     */
    public function testMultiple()
    {
        $actual = $this->object->multiple(2)->uppercase();
        $this->assertEquals('([A-Z]{2})', $actual);
    }

    /**
     * @covers NooNoo\Regex::between
     */
    public function testBetween()
    {
        $actual = $this->object->between(1, 2)->uppercase();
        $this->assertEquals('([A-Z]{1,2})', $actual);
    }

    /**
     * @covers  NooNoo\Regex::oneOrMore
     */
    public function testOneOrMore()
    {
        $actual = $this->object->oneOrMore()->uppercase();
        $this->assertEquals('([A-Z]+)', $actual);
    }

    /**
     * @covers NooNoo\Regex::zeroOrMore
     */
    public function testZeroOrMore()
    {
        $actual = $this->object->zeroOrMore()->uppercase();
        $this->assertEquals('([A-Z]*)', $actual);
    }

    /**
     * @covers NooNoo\Regex::optional
     * @todo   Implement testOptional().
     */
    public function testOptional()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NooNoo\Regex::__toString
     * @todo   Implement test__toString().
     */
    public function testToString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NooNoo\Regex::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NooNoo\Regex::isMatch
     * @todo   Implement testIsMatch().
     */
    public function testIsMatch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * Extra methods
     */

    /**
     * @covers NooNoo\Regex::__call
     */
    public function testYorkshireMethods()
    {
        $actual = $this->object->eyUp()
            ->goOnThen('test')
            ->couldAppen('s')
            ->goOnThen('more')
            ->couldAppen('text')
            ->oneOrTother('maybe', 'maybenot')
            ->thatllDo();

        $this->assertEquals('^(test)(s)?(more)(text)?(maybe|maybenot)$', $actual);
    }

    /**
     * @covers            NooNoo\Regex::__call()
     * @expectedException Exception
     */
    public function testNonexistentMethod()
    {
        $this->object->trololol();
    }
}
